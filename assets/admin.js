const ADMIN_PIN = '652713';
let questions = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
document.addEventListener('DOMContentLoaded', function() {
    loadQuestions();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –ø–æ–ª—è PIN
    document.getElementById('pin-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            checkPin();
        }
    });
});

function checkPin() {
    const pinInput = document.getElementById('pin-input');
    const pinError = document.getElementById('pin-error');
    
    if (pinInput.value === ADMIN_PIN) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π PIN - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        document.getElementById('pin-section').style.display = 'none';
        document.getElementById('admin-content').style.display = 'block';
        loadAdminContent();
    } else {
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π PIN - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        pinError.style.display = 'block';
        pinInput.value = '';
        pinInput.focus();
    }
}

function loadAdminContent() {
    loadSettings();
    loadQuestionsEditor();
}

function loadSettings() {
    const savedUrl = localStorage.getItem('sheets_url');
    if (savedUrl) {
        document.getElementById('sheets-url').value = savedUrl;
    }
}

function saveSheetsUrl() {
    const url = document.getElementById('sheets-url').value;
    if (url) {
        localStorage.setItem('sheets_url', url);
        alert('‚úÖ URL Google –¢–∞–±–ª–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
    } else {
        alert('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL Google –¢–∞–±–ª–∏—Ü—ã');
    }
}

function loadQuestions() {
    const savedQuestions = localStorage.getItem('assessment_questions');
    if (savedQuestions) {
        questions = JSON.parse(savedQuestions);
    } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        questions = [
            {
			  id: 1,
			  competence: "–ù–∞—Ü–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
			  scenario: "–ö–ª–∏–µ–Ω—Ç —Å–æ–º–Ω–µ–≤–∞–µ—Ç—Å—è –≤ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º—ã –≤ 2–ì–ò–°, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∞–ª—å–Ω–æ–º —Ä–∞–π–æ–Ω–µ. –ü—Ä–∏ —ç—Ç–æ–º –±—é–¥–∂–µ—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω, –∞ KPI –ø–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –∫–≤–∞—Ä—Ç–∞–ª–µ.",
			  question: "–ö–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?"
			},
			{
			  id: 2,
			  competence: "–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ",
			  scenario: "–í—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏, —á—Ç–æ –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ (—Å–µ—Ç–∏ –∫–æ—Ñ–µ–µ–Ω) –≤ 2–ì–ò–° —É–∫–∞–∑–∞–Ω—ã –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ –º–µ–Ω—é. –≠—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –≤ –∑–≤–æ–Ω–∫–∏.",
			  question: "–ö–∞–∫ –≤—ã –ø–æ—Å—Ç—É–ø–∏—Ç–µ?"
			},
			{
			  id: 3,
			  competence: "–†–∞–±–æ—Ç–∞ –≤ –∫–æ–º–∞–Ω–¥–µ",
			  scenario: "–û—Ç–¥–µ–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ 2–ì–ò–° –≤–Ω–µ–¥—Ä—è–µ—Ç –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é ¬´–æ–Ω–ª–∞–π–Ω-–∑–∞–ø–∏—Å—å¬ª –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤, –Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è–º –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂.",
			  question: "–ö–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –æ—Ç–¥–µ–ª–∞–º–∏?"
			},
			{
			  id: 4,
			  competence: "–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º",
			  scenario: "2–ì–ò–° –∑–∞–ø—É—Å–∫–∞–µ—Ç –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç - —Ä–µ–∫–ª–∞–º—É –≤ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥—Ö–æ–¥—ã –∫ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –æ–±—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É.",
			  question: "–ö–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è?"
			},
			{
			  id: 5,
			  competence: "–ò–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å",
			  scenario: "–í—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ –º–Ω–æ–≥–∏–µ –∫–ª–∏–µ–Ω—Ç—ã –∏–∑ —Å—Ñ–µ—Ä—ã —É—Å–ª—É–≥ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–º–æ-–∫–∞—Ä—Ç–æ—á–µ–∫ –≤ 2–ì–ò–°.",
			  question: "–ö–∞–∫ –≤—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–∞–∂ –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∞?"
			},
			{
			  id: 6,
			  competence: "–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ",
			  scenario: "–í–∞–º –Ω—É–∂–Ω–æ —Ä–∞–∑–≤–∏—Ç—å –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –≥–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–æ–º –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π 2–ì–ò–°, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂.",
			  question: "–ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –≤–∞–º –Ω—É–∂–Ω–æ —Ä–∞–∑–≤–∏—Ç—å –∏ –∫–∞–∫ –≤—ã —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç–µ?"
			},
			{
			  id: 7,
			  competence: "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
			  scenario: "–†–µ–∫–ª–∞–º–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ (—Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–ª–∏–Ω–∏–∫–∏) –≤ 2–ì–ò–° –ø–æ–∫–∞–∑–∞–ª–∞ –Ω–∏–∑–∫—É—é –∫–æ–Ω–≤–µ—Ä—Å–∏—é –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ä–∞–¥–∏—É—Å–∞ –≥–µ–æ—Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞. –ö–ª–∏–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç.",
			  question: "–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è?"
			},
			{
			  id: 8,
			  competence: "–õ–∏–¥–µ—Ä—Å—Ç–≤–æ",
			  scenario: "–í–∞–º –Ω—É–∂–Ω–æ —Å–∫–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –∫—Ä—É–ø–Ω–æ–π —Å–µ—Ç–∏ –ê–ó–° –≤ 2–ì–ò–°, –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–≤ –æ—Ç–¥–µ–ª—ã –ø—Ä–æ–¥–∞–∂, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.",
			  question: "–ö–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è?"
			},
			{
			  id: 9,
			  competence: "–ü–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–π –∏ –∑–∞–¥–∞—á",
			  scenario: "–í–∞–º –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ –∏ KPI –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π 2–ì–ò–° –º–∞–ª—ã–º –∏ —Å—Ä–µ–¥–Ω–µ–º—É –±–∏–∑–Ω–µ—Å—É –≤ –Ω–æ–≤–æ–º —Ä–µ–≥–∏–æ–Ω–µ.",
			  question: "–ö–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ —Å—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ –∏ –∑–∞–¥–∞—á–∏?"
			},
			{
			  id: 10,
			  competence: "–ö–æ–Ω—Ç—Ä–æ–ª—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á",
			  scenario: "–ö–∞–∫ –≤—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç–µ –∫–æ–Ω—Ç—Ä–æ–ª—å –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π 50+ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ 2–ì–ò–°?",
			  question: "–ö–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏ –∫–∞–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–∞?"
			},
			{
			  id: 11,
			  competence: "–ú–æ—Ç–∏–≤–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã",
			  scenario: "–ö–æ–º–∞–Ω–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º —Ä–µ–∫–ª–∞–º—ã –≤ 2–ì–ò–° –¥–µ–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Å–ø–∞–¥–∞ —Å–ø—Ä–æ—Å–∞ –≤ –ª–µ—Ç–Ω–∏–π –ø–µ—Ä–∏–æ–¥.",
			  question: "–ö–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å?"
			},
			{
			  id: 12,
			  competence: "–†–∞–∑–≤–∏—Ç–∏–µ –ø–æ–¥—á–∏–Ω–µ–Ω–Ω—ã—Ö",
			  scenario: "–û–¥–∏–Ω –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –≤ 2–ì–ò–° —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –º–∞–ª—ã–º –±–∏–∑–Ω–µ—Å–æ–º, –Ω–æ –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –ø—Ä–æ–¥–∞–∂–∞–º–∏ –∫—Ä—É–ø–Ω—ã–º —Å–µ—Ç–µ–≤—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º.",
			  question: "–ö–∞–∫ –≤—ã –ø–æ–º–æ–∂–µ—Ç–µ –µ–º—É —Ä–∞–∑–≤–∏—Ç—å –Ω—É–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏?"
			},
			{
			  id: 13,
			  competence: "–£–º–µ–Ω–∏–µ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è",
			  scenario: "–ö—Ä—É–ø–Ω–∞—è —Å–µ—Ç—å —Ä–µ—Å—Ç–æ—Ä–∞–Ω–æ–≤ —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –ø–æ —Ä–µ–∫–ª–∞–º–µ –≤ 2–ì–ò–°, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∞—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ü–µ–Ω–æ–≤–æ–π –ø–æ–ª–∏—Ç–∏–∫–µ –∫–æ–º–ø–∞–Ω–∏–∏.",
			  question: "–ö–∞–∫ –≤—ã –±—É–¥–µ—Ç–µ –≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã?"
			},
			{
			  id: 14,
			  competence: "–ü—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π",
			  scenario: "–ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ 2–ì–ò–°: –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤ –Ω–æ–≤—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –∏–ª–∏ —É–≥–ª—É–±–ª–µ–Ω–∏–µ –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.",
			  question: "–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç–µ –∏ –∫–∞–∫ –ø—Ä–∏–º–µ—Ç–µ —Ä–µ—à–µ–Ω–∏–µ?"
			}
    // ... –¥–æ–±–∞–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        ];
    }
}

function loadQuestionsEditor() {
    const editor = document.getElementById('questions-editor');
    let html = '<div class="question-list">';
    
    questions.forEach((question, index) => {
        html += `
            <div class="question-item">
                <div class="competence-badge">${question.competence}</div>
                <div class="question-scenario">${question.scenario}</div>
                <div class="question-text-admin">${question.question}</div>
                <div style="margin-top: 10px;">
                    <button onclick="editQuestion(${index})" style="background: #3498db; color: white; padding: 5px 10px; font-size: 12px;">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button onclick="deleteQuestion(${index})" style="background: #e74c3c; color: white; padding: 5px 10px; font-size: 12px; margin-left: 5px;">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    html += `<button onclick="addNewQuestion()" style="background: #27ae60; color: white; margin-top: 15px;">‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</button>`;
    
    editor.innerHTML = html;
}

function editQuestion(index) {
    const question = questions[index];
    const newScenario = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π:', question.scenario);
    const newQuestion = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å:', question.question);
    const newCompetence = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é:', question.competence);
    
    if (newScenario !== null && newQuestion !== null && newCompetence !== null) {
        questions[index].scenario = newScenario;
        questions[index].question = newQuestion;
        questions[index].competence = newCompetence;
        
        saveQuestions();
        loadQuestionsEditor();
        alert('‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!');
    }
}

function deleteQuestion(index) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?')) {
        questions.splice(index, 1);
        saveQuestions();
        loadQuestionsEditor();
        alert('‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!');
    }
}

function addNewQuestion() {
    const competence = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:');
    const scenario = prompt('–í–≤–µ–¥–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–æ–ø—Ä–æ—Å–∞:');
    const question = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:');
    
    if (competence && scenario && question) {
        const newQuestion = {
            id: questions.length + 1,
            competence: competence,
            scenario: scenario,
            question: question
        };
        
        questions.push(newQuestion);
        saveQuestions();
        loadQuestionsEditor();
        alert('‚úÖ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!');
    }
}

function saveQuestions() {
    localStorage.setItem('assessment_questions', JSON.stringify(questions));
}

function viewResults() {
    const resultsViewer = document.getElementById('results-viewer');
    const results = localStorage.getItem('assessment_results');
    
    if (results) {
        const parsedResults = JSON.parse(results);
        let html = '<h4>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h4>';
        html += `<p><strong>–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</strong> ${new Date(parsedResults.timestamp).toLocaleString('ru-RU')}</p>`;
        html += `<p><strong>–û–±—â–∏–π –±–∞–ª–ª:</strong> ${parsedResults.summary.overallAverage.toFixed(2)}</p>`;
        html += '<h5>–î–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º:</h5>';
        
        for (const [competence, data] of Object.entries(parsedResults.summary)) {
            if (competence !== 'overallAverage') {
                html += `<p><strong>${competence}:</strong> ${data.average.toFixed(2)}/4</p>`;
            }
        }
        
        resultsViewer.innerHTML = html;
    } else {
        resultsViewer.innerHTML = '<p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
    }
}

function exportResults() {
    const results = localStorage.getItem('assessment_results');
    if (results) {
        const blob = new Blob([results], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `assessment-results-${Date.now()}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        alert('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª!');
    } else {
        alert('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
    }
}

// AKfycbwzb1v2knYe840iixmjY3pB-HDClBlbHRqPHh527gm_IC74Y_S31m32F2eSiBx0sMeP
const BACKEND_URL = 'https://script.google.com/macros/s/AKfycbwzb1v2knYe840iixmjY3pB-HDClBlbHRqPHh527gm_IC74Y_S31m32F2eSiBx0sMeP/exec';

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadQuestionsFromServer() {
    try {
        const response = await fetch(`${BACKEND_URL}?path=questions&action=get`);
        const data = await response.json();
        
        console.log('Questions response:', data);
        
        if (data.success && data.questions) {
            questions = data.questions;
            return true;
        }
    } catch (error) {
        console.error('Error loading questions from server:', error);
    }
    return false;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function getResultsFromServer() {
    try {
        const response = await fetch(`${BACKEND_URL}?path=results&action=get&pin=${ADMIN_PIN}`);
        const data = await response.json();
        
        console.log('Results response:', data);
        
        if (data.success) {
            return data;
        }
    } catch (error) {
        console.error('Error getting results from server:', error);
    }
    return null;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function saveSettingsToServer(settings) {
    try {
        const url = `${BACKEND_URL}?path=settings&action=save&pin=${ADMIN_PIN}&sheets_url=${encodeURIComponent(settings.sheets_url || '')}`;
        const response = await fetch(url);
        
        const data = await response.json();
        console.log('Settings save response:', data);
        return data.success;
    } catch (error) {
        console.error('Error saving settings to server:', error);
        return false;
    }
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function setupExportControls() {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞
    document.getElementById('date-range').addEventListener('change', function() {
        const customDates = document.getElementById('custom-dates');
        customDates.style.display = this.value === 'custom' ? 'block' : 'none';
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const today = new Date().toISOString().split('T')[0];
    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
    
    document.getElementById('date-from').value = weekAgo;
    document.getElementById('date-to').value = today;
}

// –í—ã–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async function exportResults() {
    const format = document.getElementById('export-format').value;
    const dateRange = document.getElementById('date-range').value;
    const statusDiv = document.getElementById('export-status');
    
    statusDiv.innerHTML = '<div class="export-progress">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</div>';
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
        const resultsData = await getResultsFromServer();
        
        if (!resultsData || !resultsData.success) {
            statusDiv.innerHTML = '<div style="color: #e74c3c;">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>';
            return;
        }
        
        const results = resultsData.results || [];
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
        const filteredResults = filterResultsByDate(results, dateRange);
        
        if (filteredResults.length === 0) {
            statusDiv.innerHTML = '<div style="color: #f39c12;">‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞</div>';
            return;
        }
        
        statusDiv.innerHTML = `<div class="export-progress">‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${filteredResults.length}</div>`;
        
        // –°–æ–∑–¥–∞–µ–º –≤—ã–≥—Ä—É–∑–∫—É –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        switch (format) {
            case 'excel':
                await exportToExcel(filteredResults, resultsData.headers);
                break;
            case 'csv':
                exportToCSV(filteredResults, resultsData.headers);
                break;
            case 'json':
                exportToJSON(filteredResults);
                break;
        }
        
    } catch (error) {
        console.error('Export error:', error);
        statusDiv.innerHTML = `<div style="color: #e74c3c;">‚ùå –û—à–∏–±–∫–∞ –≤—ã–≥—Ä—É–∑–∫–∏: ${error.message}</div>`;
    }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ
function filterResultsByDate(results, dateRange) {
    const now = new Date();
    
    switch (dateRange) {
        case 'today':
            const today = now.toISOString().split('T')[0];
            return results.filter(result => {
                const resultDate = new Date(result.Timestamp).toISOString().split('T')[0];
                return resultDate === today;
            });
            
        case 'week':
            const weekAgo = new Date(now - 7 * 24 * 60 * 60 * 1000);
            return results.filter(result => new Date(result.Timestamp) >= weekAgo);
            
        case 'month':
            const monthAgo = new Date(now - 30 * 24 * 60 * 60 * 1000);
            return results.filter(result => new Date(result.Timestamp) >= monthAgo);
            
        case 'custom':
            const dateFrom = new Date(document.getElementById('date-from').value);
            const dateTo = new Date(document.getElementById('date-to').value);
            dateTo.setHours(23, 59, 59, 999); // –ö–æ–Ω–µ—Ü –¥–Ω—è
            
            return results.filter(result => {
                const resultDate = new Date(result.Timestamp);
                return resultDate >= dateFrom && resultDate <= dateTo;
            });
            
        default:
            return results;
    }
}

// –í—ã–≥—Ä—É–∑–∫–∞ –≤ Excel
async function exportToExcel(results, headers) {
    try {
        statusDiv.innerHTML = '<div class="export-progress">üìä –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞...</div>';
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É SheetJS (xlsx)
        const XLSX = await loadXLSXLibrary();
        
        // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
        const wb = XLSX.utils.book_new();
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        const excelData = [headers];
        results.forEach(result => {
            const row = headers.map(header => result[header] || '');
            excelData.push(row);
        });
        
        // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç
        const ws = XLSX.utils.aoa_to_sheet(excelData);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç –≤ –∫–Ω–∏–≥—É
        XLSX.utils.book_append_sheet(wb, ws, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã');
        
        // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º
        await createCompetenceReport(wb, results);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const fileName = `assessment_results_${new Date().toISOString().split('T')[0]}.xlsx`;
        XLSX.writeFile(wb, fileName);
        
        document.getElementById('export-status').innerHTML = 
            `<div class="export-progress">‚úÖ Excel —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${fileName}</div>`;
        
    } catch (error) {
        console.error('Excel export error:', error);
        // –§–æ–ª–±—ç–∫ –Ω–∞ CSV –µ—Å–ª–∏ Excel –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        exportToCSV(results, headers);
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ SheetJS
function loadXLSXLibrary() {
    return new Promise((resolve, reject) => {
        if (window.XLSX) {
            resolve(window.XLSX);
            return;
        }
        
        const script = document.createElement('script');
        script.src = 'https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js';
        script.onload = () => resolve(window.XLSX);
        script.onerror = () => reject(new Error('Failed to load XLSX library'));
        document.head.appendChild(script);
    });
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º
async function createCompetenceReport(wb, results) {
    try {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º
        const competenceStats = analyzeCompetenceStats(results);
        
        // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        const statsData = [
            ['–û—Ç—á–µ—Ç –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º'],
            ['–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:', new Date().toLocaleString('ru-RU')],
            ['–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫:', results.length],
            [''],
            ['–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è', '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª', '–ú–∏–Ω.', '–ú–∞–∫—Å.', '–ö–æ–ª-–≤–æ –æ—Ü–µ–Ω–æ–∫']
        ];
        
        Object.entries(competenceStats).forEach(([competence, stats]) => {
            statsData.push([
                competence,
                stats.average.toFixed(2),
                stats.min,
                stats.max,
                stats.count
            ]);
        });
        
        const ws = XLSX.utils.aoa_to_sheet(statsData);
        XLSX.utils.book_append_sheet(wb, ws, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');
        
    } catch (error) {
        console.error('Error creating competence report:', error);
    }
}

// –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º
function analyzeCompetenceStats(results) {
    const stats = {};
    
    results.forEach(result => {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–ª–ª—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö Comp1 Score, Comp2 Score, etc.)
        Object.keys(result).forEach(key => {
            if (key.includes('Comp') && key.includes('Score') && result[key] !== '') {
                const compNumber = key.match(/Comp(\d+)/)[1];
                const compName = `–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è ${compNumber}`;
                const score = parseFloat(result[key]);
                
                if (!isNaN(score)) {
                    if (!stats[compName]) {
                        stats[compName] = {
                            total: 0,
                            count: 0,
                            min: 5,
                            max: 0
                        };
                    }
                    
                    stats[compName].total += score;
                    stats[compName].count++;
                    stats[compName].min = Math.min(stats[compName].min, score);
                    stats[compName].max = Math.max(stats[compName].max, score);
                }
            }
        });
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    Object.keys(stats).forEach(comp => {
        stats[comp].average = stats[comp].total / stats[comp].count;
    });
    
    return stats;
}

// –í—ã–≥—Ä—É–∑–∫–∞ –≤ CSV
function exportToCSV(results, headers) {
    try {
        // –°–æ–∑–¥–∞–µ–º CSV —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        let csvContent = headers.join(',') + '\n';
        
        results.forEach(result => {
            const row = headers.map(header => {
                let value = result[header] || '';
                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –∫–∞–≤—ã—á–∫–∏
                if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
                    value = '"' + value.replace(/"/g, '""') + '"';
                }
                return value;
            });
            csvContent += row.join(',') + '\n';
        });
        
        // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const fileName = `assessment_results_${new Date().toISOString().split('T')[0]}.csv`;
        downloadBlob(blob, fileName);
        
        document.getElementById('export-status').innerHTML = 
            `<div class="export-progress">‚úÖ CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${fileName}</div>`;
        
    } catch (error) {
        console.error('CSV export error:', error);
    }
}

// –í—ã–≥—Ä—É–∑–∫–∞ –≤ JSON
function exportToJSON(results) {
    try {
        const jsonContent = JSON.stringify(results, null, 2);
        const blob = new Blob([jsonContent], { type: 'application/json;charset=utf-8;' });
        const fileName = `assessment_results_${new Date().toISOString().split('T')[0]}.json`;
        downloadBlob(blob, fileName);
        
        document.getElementById('export-status').innerHTML = 
            `<div class="export-progress">‚úÖ JSON —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: ${fileName}</div>`;
        
    } catch (error) {
        console.error('JSON export error:', error);
    }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
function downloadBlob(blob, fileName) {
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
async function generateReport() {
    const statusDiv = document.getElementById('export-status');
    statusDiv.innerHTML = '<div class="export-progress">üìà –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...</div>';
    
    try {
        const resultsData = await getResultsFromServer();
        
        if (!resultsData || !resultsData.success) {
            statusDiv.innerHTML = '<div style="color: #e74c3c;">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</div>';
            return;
        }
        
        const results = resultsData.results || [];
        
        if (results.length === 0) {
            statusDiv.innerHTML = '<div style="color: #f39c12;">‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞</div>';
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º HTML –æ—Ç—á–µ—Ç
        const reportHTML = createHTMLReport(results, resultsData.headers);
        statusDiv.innerHTML = reportHTML;
        
    } catch (error) {
        console.error('Report generation error:', error);
        statusDiv.innerHTML = `<div style="color: #e74c3c;">‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${error.message}</div>`;
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ HTML –æ—Ç—á–µ—Ç–∞
function createHTMLReport(results, headers) {
    const totalAssessments = results.length;
    const today = new Date().toISOString().split('T')[0];
    const todayCount = results.filter(r => r.Timestamp.includes(today)).length;
    
    // –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
    const competenceStats = analyzeCompetenceStats(results);
    const dateStats = analyzeDateStats(results);
    
    let html = `
        <div class="report-section">
            <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç</h4>
            
            <div class="export-stats">
                <div class="stat-card">
                    <div class="stat-value">${totalAssessments}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${todayCount}</div>
                    <div class="stat-label">–û—Ü–µ–Ω–æ–∫ —Å–µ–≥–æ–¥–Ω—è</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${Object.keys(competenceStats).length}</div>
                    <div class="stat-label">–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">${dateStats.period}</div>
                    <div class="stat-label">–ü–µ—Ä–∏–æ–¥ –¥–∞–Ω–Ω—ã—Ö</div>
                </div>
            </div>
            
            <h5 style="margin-top: 20px;">–†–µ–π—Ç–∏–Ω–≥ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π</h5>
            <table class="report-table">
                <thead>
                    <tr>
                        <th>–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è</th>
                        <th>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª</th>
                        <th>–ú–∏–Ω.</th>
                        <th>–ú–∞–∫—Å.</th>
                        <th>–û—Ü–µ–Ω–æ–∫</th>
                    </tr>
                </thead>
                <tbody>
    `;
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É
    const sortedStats = Object.entries(competenceStats)
        .sort(([,a], [,b]) => b.average - a.average);
    
    sortedStats.forEach(([competence, stats]) => {
        html += `
            <tr>
                <td>${competence}</td>
                <td>${stats.average.toFixed(2)}</td>
                <td>${stats.min}</td>
                <td>${stats.max}</td>
                <td>${stats.count}</td>
            </tr>
        `;
    });
    
    html += `
                </tbody>
            </table>
            
            <div class="download-links">
                <a href="#" onclick="exportResults()" class="download-link">üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel</a>
                <a href="#" onclick="exportToCSV(${JSON.stringify(results)}, ${JSON.stringify(headers)})" class="download-link">üì• –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ CSV</a>
                <a href="#" onclick="printReport()" class="download-link">üñ®Ô∏è –ü–µ—á–∞—Ç—å –æ—Ç—á–µ—Ç–∞</a>
            </div>
        </div>
    `;
    
    return html;
}

// –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –¥–∞—Ç–∞–º
function analyzeDateStats(results) {
    if (results.length === 0) {
        return { period: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö' };
    }
    
    const dates = results.map(r => new Date(r.Timestamp)).sort((a, b) => a - b);
    const firstDate = dates[0];
    const lastDate = dates[dates.length - 1];
    
    const diffTime = Math.abs(lastDate - firstDate);
    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    
    return {
        period: `${diffDays} –¥–Ω–µ–π`,
        firstDate: firstDate.toLocaleDateString('ru-RU'),
        lastDate: lastDate.toLocaleDateString('ru-RU')
    };
}

// –ü–µ—á–∞—Ç—å –æ—Ç—á–µ—Ç–∞
function printReport() {
    const reportSection = document.querySelector('.report-section');
    if (reportSection) {
        const printWindow = window.open('', '_blank');
        printWindow.document.write(`
            <html>
                <head>
                    <title>–û—Ç—á–µ—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π</title>
                    <style>
                        body { font-family: Arial, sans-serif; margin: 20px; }
                        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
                        th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }
                        th { background: #f0f0f0; }
                        .header { text-align: center; margin-bottom: 30px; }
                    </style>
                </head>
                <body>
                    <div class="header">
                        <h1>–û—Ç—á–µ—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π</h1>
                        <p>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: ${new Date().toLocaleString('ru-RU')}</p>
                    </div>
                    ${reportSection.innerHTML}
                </body>
            </html>
        `);
        printWindow.document.close();
        printWindow.print();
    }
}

// –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é loadAdminContent
async function loadAdminContent() {
    loadSettings();
    loadQuestionsEditor();
    setupExportControls(); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
}
