const ADMIN_PIN = '652713';
let questions = [];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
document.addEventListener('DOMContentLoaded', function() {
    loadQuestions();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter –¥–ª—è –ø–æ–ª—è PIN
    document.getElementById('pin-input').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            checkPin();
        }
    });
});

function checkPin() {
    const pinInput = document.getElementById('pin-input');
    const pinError = document.getElementById('pin-error');
    
    if (pinInput.value === ADMIN_PIN) {
        // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π PIN - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        document.getElementById('pin-section').style.display = 'none';
        document.getElementById('admin-content').style.display = 'block';
        loadAdminContent();
    } else {
        // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π PIN - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        pinError.style.display = 'block';
        pinInput.value = '';
        pinInput.focus();
    }
}

function loadAdminContent() {
    loadSettings();
    loadQuestionsEditor();
}

function loadSettings() {
    const savedUrl = localStorage.getItem('sheets_url');
    if (savedUrl) {
        document.getElementById('sheets-url').value = savedUrl;
    }
}

function saveSheetsUrl() {
    const url = document.getElementById('sheets-url').value;
    if (url) {
        localStorage.setItem('sheets_url', url);
        alert('‚úÖ URL Google –¢–∞–±–ª–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
    } else {
        alert('‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL Google –¢–∞–±–ª–∏—Ü—ã');
    }
}

function loadQuestions() {
    const savedQuestions = localStorage.getItem('assessment_questions');
    if (savedQuestions) {
        questions = JSON.parse(savedQuestions);
    } else {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        questions = [
            {
                id: 1,
                competence: "–ù–∞—Ü–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
                scenario: "–í–∞–∂–Ω–æ–º—É –∫–ª–∏–µ–Ω—Ç—É –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç –∑–∞–≤—Ç—Ä–∞ –∫ 9:00. –í 18:00 –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É –≤ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ö–æ–º–∞–Ω–¥–∞ —É–∂–µ —É—Å—Ç–∞–ª–∞ –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è —É—Ö–æ–¥–∏—Ç—å.",
                question: "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏:"
            },
            {
                id: 2,
                competence: "–û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ",
                scenario: "–í—ã –∑–∞–º–µ—á–∞–µ—Ç–µ, —á—Ç–æ –∫–æ–ª–ª–µ–≥–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π —à–∞–±–ª–æ–Ω –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –∏–∑-–∑–∞ —á–µ–≥–æ –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–∞—Ç–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∞–≤–∫–∏. –ö–æ–ª–ª–µ–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ–º–ø–∞–Ω–∏–∏ 15 –ª–µ—Ç –∏ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è–º.",
                question: "–ö–∞–∫ –≤—ã –ø–æ—Å—Ç—É–ø–∏—Ç–µ –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?"
            }
            // ... –¥–æ–±–∞–≤—å—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        ];
    }
}

function loadQuestionsEditor() {
    const editor = document.getElementById('questions-editor');
    let html = '<div class="question-list">';
    
    questions.forEach((question, index) => {
        html += `
            <div class="question-item">
                <div class="competence-badge">${question.competence}</div>
                <div class="question-scenario">${question.scenario}</div>
                <div class="question-text-admin">${question.question}</div>
                <div style="margin-top: 10px;">
                    <button onclick="editQuestion(${index})" style="background: #3498db; color: white; padding: 5px 10px; font-size: 12px;">‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                    <button onclick="deleteQuestion(${index})" style="background: #e74c3c; color: white; padding: 5px 10px; font-size: 12px; margin-left: 5px;">üóëÔ∏è –£–¥–∞–ª–∏—Ç—å</button>
                </div>
            </div>
        `;
    });
    
    html += '</div>';
    html += `<button onclick="addNewQuestion()" style="background: #27ae60; color: white; margin-top: 15px;">‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</button>`;
    
    editor.innerHTML = html;
}

function editQuestion(index) {
    const question = questions[index];
    const newScenario = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π:', question.scenario);
    const newQuestion = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å:', question.question);
    const newCompetence = prompt('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—é:', question.competence);
    
    if (newScenario !== null && newQuestion !== null && newCompetence !== null) {
        questions[index].scenario = newScenario;
        questions[index].question = newQuestion;
        questions[index].competence = newCompetence;
        
        saveQuestions();
        loadQuestionsEditor();
        alert('‚úÖ –í–æ–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω!');
    }
}

function deleteQuestion(index) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å?')) {
        questions.splice(index, 1);
        saveQuestions();
        loadQuestionsEditor();
        alert('‚úÖ –í–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!');
    }
}

function addNewQuestion() {
    const competence = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏:');
    const scenario = prompt('–í–≤–µ–¥–∏—Ç–µ —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–æ–ø—Ä–æ—Å–∞:');
    const question = prompt('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞:');
    
    if (competence && scenario && question) {
        const newQuestion = {
            id: questions.length + 1,
            competence: competence,
            scenario: scenario,
            question: question
        };
        
        questions.push(newQuestion);
        saveQuestions();
        loadQuestionsEditor();
        alert('‚úÖ –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω!');
    }
}

function saveQuestions() {
    localStorage.setItem('assessment_questions', JSON.stringify(questions));
}

function viewResults() {
    const resultsViewer = document.getElementById('results-viewer');
    const results = localStorage.getItem('assessment_results');
    
    if (results) {
        const parsedResults = JSON.parse(results);
        let html = '<h4>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</h4>';
        html += `<p><strong>–í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:</strong> ${new Date(parsedResults.timestamp).toLocaleString('ru-RU')}</p>`;
        html += `<p><strong>–û–±—â–∏–π –±–∞–ª–ª:</strong> ${parsedResults.summary.overallAverage.toFixed(2)}</p>`;
        html += '<h5>–î–µ—Ç–∞–ª–∏ –ø–æ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º:</h5>';
        
        for (const [competence, data] of Object.entries(parsedResults.summary)) {
            if (competence !== 'overallAverage') {
                html += `<p><strong>${competence}:</strong> ${data.average.toFixed(2)}/4</p>`;
            }
        }
        
        resultsViewer.innerHTML = html;
    } else {
        resultsViewer.innerHTML = '<p>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.</p>';
    }
}

function exportResults() {
    const results = localStorage.getItem('assessment_results');
    if (results) {
        const blob = new Blob([results], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `assessment-results-${Date.now()}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        alert('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª!');
    } else {
        alert('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
    }
}

// AKfycbwzb1v2knYe840iixmjY3pB-HDClBlbHRqPHh527gm_IC74Y_S31m32F2eSiBx0sMeP
const BACKEND_URL = 'https://script.google.com/macros/s/AKfycbwzb1v2knYe840iixmjY3pB-HDClBlbHRqPHh527gm_IC74Y_S31m32F2eSiBx0sMeP/exec';

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function loadQuestionsFromServer() {
    try {
        const response = await fetch(`${BACKEND_URL}?path=questions&action=get`);
        const data = await response.json();
        
        if (data.success && data.questions) {
            questions = data.questions;
            return true;
        }
    } catch (error) {
        console.error('Error loading questions from server:', error);
    }
    return false;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function saveQuestionsToServer(questionsData) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        const url = `${BACKEND_URL}?path=questions&action=save&pin=${ADMIN_PIN}`;
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({questions: questionsData})
        });
        
        const data = await response.json();
        return data.success;
    } catch (error) {
        console.error('Error saving questions to server:', error);
        return false;
    }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
async function getResultsFromServer() {
    try {
        const response = await fetch(`${BACKEND_URL}?path=results&action=get&pin=${ADMIN_PIN}`);
        const data = await response.json();
        
        if (data.success) {
            return data;
        }
    } catch (error) {
        console.error('Error getting results from server:', error);
    }
    return null;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
async function saveSettingsToServer(settings) {
    try {
        const url = `${BACKEND_URL}?path=settings&action=save&pin=${ADMIN_PIN}&sheets_url=${encodeURIComponent(settings.sheets_url || '')}`;
        const response = await fetch(url, {
            method: 'POST'
        });
        
        const data = await response.json();
        return data.success;
    } catch (error) {
        console.error('Error saving settings to server:', error);
        return false;
    }
}